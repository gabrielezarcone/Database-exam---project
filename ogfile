2018-10-03 15:55:27.810 CEST [2336] LOG:  listening on IPv6 address "::1", port 5432
2018-10-03 15:55:27.810 CEST [2336] LOG:  listening on IPv4 address "127.0.0.1", port 5432
2018-10-03 15:55:27.811 CEST [2336] LOG:  listening on Unix socket "/tmp/.s.PGSQL.5432"
2018-10-03 15:55:27.848 CEST [2337] LOG:  database system was shut down at 2018-10-03 00:45:48 CEST
2018-10-03 15:55:27.864 CEST [2336] LOG:  database system is ready to accept connections
2018-10-17 21:00:02.791 CEST [1220] LOG:  listening on IPv6 address "::1", port 5432
2018-10-17 21:00:02.792 CEST [1220] LOG:  listening on IPv4 address "127.0.0.1", port 5432
2018-10-17 21:00:02.793 CEST [1220] LOG:  listening on Unix socket "/tmp/.s.PGSQL.5432"
2018-10-17 21:00:02.827 CEST [1221] LOG:  database system was shut down at 2018-10-17 18:02:28 CEST
2018-10-17 21:00:02.836 CEST [1220] LOG:  database system is ready to accept connections
2018-10-17 23:26:14.471 CEST [1220] LOG:  received smart shutdown request
2018-10-17 23:26:14.472 CEST [1220] LOG:  worker process: logical replication launcher (PID 1227) exited with exit code 1
2018-10-17 23:26:14.473 CEST [1222] LOG:  shutting down
2018-10-17 23:26:14.485 CEST [1220] LOG:  database system is shut down
2018-10-20 10:29:45.039 CEST [2283] LOG:  listening on IPv6 address "::1", port 5432
2018-10-20 10:29:45.040 CEST [2283] LOG:  listening on IPv4 address "127.0.0.1", port 5432
2018-10-20 10:29:45.041 CEST [2283] LOG:  listening on Unix socket "/tmp/.s.PGSQL.5432"
2018-10-20 10:29:45.078 CEST [2284] LOG:  database system was shut down at 2018-10-17 23:26:14 CEST
2018-10-20 10:29:45.088 CEST [2283] LOG:  database system is ready to accept connections
2018-10-22 15:27:03.217 CEST [2189] LOG:  listening on IPv6 address "::1", port 5432
2018-10-22 15:27:03.217 CEST [2189] LOG:  listening on IPv4 address "127.0.0.1", port 5432
2018-10-22 15:27:03.219 CEST [2189] LOG:  listening on Unix socket "/tmp/.s.PGSQL.5432"
2018-10-22 15:27:03.245 CEST [2190] LOG:  database system was interrupted; last known up at 2018-10-20 10:46:19 CEST
2018-10-22 15:27:04.085 CEST [2190] LOG:  database system was not properly shut down; automatic recovery in progress
2018-10-22 15:27:04.093 CEST [2190] LOG:  redo starts at 0/1BAB650
2018-10-22 15:27:04.093 CEST [2190] LOG:  invalid record length at 0/1BAB730: wanted 24, got 0
2018-10-22 15:27:04.093 CEST [2190] LOG:  redo done at 0/1BAB6F8
2018-10-22 15:27:04.108 CEST [2189] LOG:  database system is ready to accept connections
2018-10-22 15:32:13.986 CEST [2205] ERROR:  operator does not exist: integer = character varying at character 191
2018-10-22 15:32:13.986 CEST [2205] HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
2018-10-22 15:32:13.986 CEST [2205] QUERY:  SELECT *
	        FROM crowdsourcing.task AS T JOIN crowdsourcing.requires_keyword as RK ON T.id=RK.task join crowdsourcing.has_keyword as HK on RK.keyword=HK.keyword
	        WHERE T.campaign=$1 AND RK.keyword IN (SELECT keyword
	                                            FROM crowdsourcing.has_keyword
	                                            WHERE worker=$2) AND T.id NOT IN(SELECT task
	                                                                            FROM crowdsourcing.recives_task
	                                                                            WHERE worker=$2)
	        order by HK.score desc
	        LIMIT 1
2018-10-22 15:32:13.986 CEST [2205] CONTEXT:  PL/pgSQL function best_task(character varying,integer) line 4 at RETURN QUERY
2018-10-22 15:32:13.986 CEST [2205] STATEMENT:  select * from best_task('pc',11);
2018-10-22 15:33:03.450 CEST [2205] ERROR:  function best_task(integer, unknown) does not exist at character 15
2018-10-22 15:33:03.450 CEST [2205] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2018-10-22 15:33:03.450 CEST [2205] STATEMENT:  select * from best_task(11,'pc');
2018-10-22 15:33:19.934 CEST [2205] ERROR:  structure of query does not match function result type
2018-10-22 15:33:19.934 CEST [2205] DETAIL:  Returned type integer does not match expected type character varying in column 1.
2018-10-22 15:33:19.934 CEST [2205] CONTEXT:  PL/pgSQL function best_task(integer,character varying) line 4 at RETURN QUERY
2018-10-22 15:33:19.934 CEST [2205] STATEMENT:  select * from best_task(11,'pc');
2018-10-22 15:35:00.074 CEST [2205] ERROR:  syntax error at or near ")" at character 75
2018-10-22 15:35:00.074 CEST [2205] STATEMENT:  CREATE OR REPLACE FUNCTION best_task (INTEGER, varchar(20)) RETURNS TABLE() AS $$
	    DECLARE
	    BEGIN
	        RETURN QUERY SELECT *
	        FROM crowdsourcing.task AS T JOIN crowdsourcing.requires_keyword as RK ON T.id=RK.task join crowdsourcing.has_keyword as HK on RK.keyword=HK.keyword
	        WHERE T.campaign=$1 AND RK.keyword IN (SELECT keyword
	                                            FROM crowdsourcing.has_keyword
	                                            WHERE worker=$2) AND T.id NOT IN(SELECT task
	                                                                            FROM crowdsourcing.recives_task
	                                                                            WHERE worker=$2)
	        order by HK.score desc
	        LIMIT 1;
	    END;
	$$ LANGUAGE plpgsql;
2018-10-22 15:38:02.763 CEST [2205] ERROR:  cannot change return type of existing function
2018-10-22 15:38:02.763 CEST [2205] DETAIL:  Row type defined by OUT parameters is different.
2018-10-22 15:38:02.763 CEST [2205] HINT:  Use DROP FUNCTION best_task(integer,character varying) first.
2018-10-22 15:38:02.763 CEST [2205] STATEMENT:  CREATE OR REPLACE FUNCTION best_task (INTEGER, varchar(20)) RETURNS TABLE(id INTEGER, title VARCHAR(50), description VARCHAR(280)) AS $$
	    DECLARE
	    BEGIN
	        RETURN QUERY SELECT T.task, T.title, T.description
	        FROM crowdsourcing.task AS T JOIN crowdsourcing.requires_keyword as RK ON T.id=RK.task join crowdsourcing.has_keyword as HK on RK.keyword=HK.keyword
	        WHERE T.campaign=$1 AND RK.keyword IN (SELECT keyword
	                                            FROM crowdsourcing.has_keyword
	                                            WHERE worker=$2) AND T.id NOT IN(SELECT task
	                                                                            FROM crowdsourcing.recives_task
	                                                                            WHERE worker=$2)
	        order by HK.score desc
	        LIMIT 1;
	    END;
	$$ LANGUAGE plpgsql;
2018-10-22 15:38:20.994 CEST [2205] ERROR:  function name "best_task" is not unique
2018-10-22 15:38:20.994 CEST [2205] HINT:  Specify the argument list to select the function unambiguously.
2018-10-22 15:38:20.994 CEST [2205] STATEMENT:  drop function best_task
	;
2018-10-22 15:38:50.889 CEST [2205] ERROR:  column t.task does not exist at character 8
2018-10-22 15:38:50.889 CEST [2205] HINT:  Perhaps you meant to reference the column "rk.task".
2018-10-22 15:38:50.889 CEST [2205] QUERY:  SELECT T.task, T.title, T.description
	        FROM crowdsourcing.task AS T JOIN crowdsourcing.requires_keyword as RK ON T.id=RK.task join crowdsourcing.has_keyword as HK on RK.keyword=HK.keyword
	        WHERE T.campaign=$1 AND RK.keyword IN (SELECT keyword
	                                            FROM crowdsourcing.has_keyword
	                                            WHERE worker=$2) AND T.id NOT IN(SELECT task
	                                                                            FROM crowdsourcing.recives_task
	                                                                            WHERE worker=$2)
	        order by HK.score desc
	        LIMIT 1
2018-10-22 15:38:50.889 CEST [2205] CONTEXT:  PL/pgSQL function best_task(integer,character varying) line 4 at RETURN QUERY
2018-10-22 15:38:50.889 CEST [2205] STATEMENT:  select * from best_task(11,'pc');
2018-10-22 15:47:02.543 CEST [2438] ERROR:  function best_task(unknown, unknown) is not unique at character 15
2018-10-22 15:47:02.543 CEST [2438] HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
2018-10-22 15:47:02.543 CEST [2438] STATEMENT:  SELECT * FROM best_task($1,$2)
2018-10-22 15:47:02.554 CEST [2438] ERROR:  prepared statement "tasks" does not exist
2018-10-22 15:47:19.032 CEST [2442] ERROR:  function best_task(unknown, unknown) is not unique at character 15
2018-10-22 15:47:19.032 CEST [2442] HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
2018-10-22 15:47:19.032 CEST [2442] STATEMENT:  SELECT * FROM best_task($1,$2)
2018-10-22 15:47:19.032 CEST [2442] ERROR:  prepared statement "tasks" does not exist
2018-10-22 15:47:20.842 CEST [2445] ERROR:  function best_task(unknown, unknown) is not unique at character 15
2018-10-22 15:47:20.842 CEST [2445] HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
2018-10-22 15:47:20.842 CEST [2445] STATEMENT:  SELECT * FROM best_task($1,$2)
2018-10-22 15:47:20.843 CEST [2445] ERROR:  prepared statement "tasks" does not exist
2018-10-22 15:47:21.768 CEST [2448] ERROR:  function best_task(unknown, unknown) is not unique at character 15
2018-10-22 15:47:21.768 CEST [2448] HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
2018-10-22 15:47:21.768 CEST [2448] STATEMENT:  SELECT * FROM best_task($1,$2)
2018-10-22 15:47:21.768 CEST [2448] ERROR:  prepared statement "tasks" does not exist
2018-10-22 15:47:22.773 CEST [2451] ERROR:  function best_task(unknown, unknown) is not unique at character 15
2018-10-22 15:47:22.773 CEST [2451] HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
2018-10-22 15:47:22.773 CEST [2451] STATEMENT:  SELECT * FROM best_task($1,$2)
2018-10-22 15:47:22.773 CEST [2451] ERROR:  prepared statement "tasks" does not exist
2018-10-22 15:47:23.640 CEST [2454] ERROR:  function best_task(unknown, unknown) is not unique at character 15
2018-10-22 15:47:23.640 CEST [2454] HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
2018-10-22 15:47:23.640 CEST [2454] STATEMENT:  SELECT * FROM best_task($1,$2)
2018-10-22 15:47:23.640 CEST [2454] ERROR:  prepared statement "tasks" does not exist
2018-10-22 15:47:24.437 CEST [2457] ERROR:  function best_task(unknown, unknown) is not unique at character 15
2018-10-22 15:47:24.437 CEST [2457] HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
2018-10-22 15:47:24.437 CEST [2457] STATEMENT:  SELECT * FROM best_task($1,$2)
2018-10-22 15:47:24.438 CEST [2457] ERROR:  prepared statement "tasks" does not exist
2018-10-22 15:48:12.607 CEST [2523] ERROR:  function crowdsourcing.best_task(unknown, unknown) does not exist at character 15
2018-10-22 15:48:12.607 CEST [2523] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2018-10-22 15:48:12.607 CEST [2523] STATEMENT:  SELECT * FROM crowdsourcing.best_task($1,$2)
2018-10-22 15:48:12.608 CEST [2523] ERROR:  prepared statement "tasks" does not exist
2018-10-22 15:50:00.332 CEST [2636] FATAL:  role "administator" does not exist
2018-10-22 15:51:51.800 CEST [2645] FATAL:  database "localhost" does not exist
2018-10-22 15:52:52.549 CEST [2656] ERROR:  syntax error at or near "/" at character 1
2018-10-22 15:52:52.549 CEST [2656] STATEMENT:  /d
	;
2018-10-22 15:53:36.203 CEST [2656] ERROR:  function name "best_task" is not unique
2018-10-22 15:53:36.203 CEST [2656] HINT:  Specify the argument list to select the function unambiguously.
2018-10-22 15:53:36.203 CEST [2656] STATEMENT:  drop function best_task
	;
2018-10-22 15:53:43.954 CEST [2656] ERROR:  syntax error at or near "*" at character 25
2018-10-22 15:53:43.954 CEST [2656] STATEMENT:  drop function best_task *;
2018-10-22 15:54:16.889 CEST [2656] ERROR:  must be owner of function best_task
2018-10-22 15:54:16.889 CEST [2656] STATEMENT:  drop function best_task(varchar,integer);
2018-10-22 20:58:28.772 CEST [3693] ERROR:  syntax error at or near "all" at character 22
2018-10-22 20:58:28.772 CEST [3693] STATEMENT:  SELECT answer, count all answer AS num
	            FROM crowdsourcing.choose
	            WHERE task = task_id
	            GROUP BY answer
	            ORDER BY num;
2018-10-22 20:58:37.865 CEST [3693] ERROR:  syntax error at or near "all" at character 22
2018-10-22 20:58:37.865 CEST [3693] STATEMENT:  SELECT answer, count all answer 
	            FROM crowdsourcing.choose
	            WHERE task = task_id
	            GROUP BY answer
	            ORDER BY num;
2018-10-22 20:59:39.189 CEST [3693] ERROR:  column "task_id" does not exist at character 95
2018-10-22 20:59:39.189 CEST [3693] HINT:  Perhaps you meant to reference the column "choose.task".
2018-10-22 20:59:39.189 CEST [3693] STATEMENT:  SELECT answer, count(*) AS num
	            FROM crowdsourcing.choose
	            WHERE task = task_id
	            GROUP BY answer
	            ORDER BY num;
2018-10-22 21:01:04.962 CEST [3693] ERROR:  insert or update on table "choose" violates foreign key constraint "choose_task_fkey"
2018-10-22 21:01:04.962 CEST [3693] DETAIL:  Key (task, answer)=(34, asdasd) is not present in table "answer".
2018-10-22 21:01:04.962 CEST [3693] STATEMENT:  BEGIN;
	INSERT INTO "crowdsourcing"."choose"("worker", "task", "answer") VALUES('tc', 34, 'yes') RETURNING "worker", "task", "answer";
	INSERT INTO "crowdsourcing"."choose"("worker", "task", "answer") VALUES('us', 34, 'asdasd') RETURNING "worker", "task", "answer";
	INSERT INTO "crowdsourcing"."choose"("worker", "task", "answer") VALUES('zarc_o', 34, 'qwe') RETURNING "worker", "task", "answer";
	INSERT INTO "crowdsourcing"."choose"("worker", "task", "answer") VALUES('xyz', 34, 'qwe') RETURNING "worker", "task", "answer";
	
2018-10-22 21:08:07.635 CEST [3693] ERROR:  aggregate function calls cannot be nested at character 133
2018-10-22 21:08:07.635 CEST [3693] STATEMENT:  SELECT answer
	            FROM crowdsourcing.choose
	            WHERE task = 6
	            GROUP BY answer
	            ORDER BY max(count(all answer)) DESC
	
2018-10-22 21:13:03.053 CEST [3693] ERROR:  syntax error at or near "having" at character 177
2018-10-22 21:13:03.053 CEST [3693] STATEMENT:  SELECT answer, count(all answer) as num
	            FROM crowdsourcing.choose
	            WHERE task = 6 
	            GROUP BY answer
	            ORDER BY num DESC
	            having num >= ALL(SElect count(all answer) as num
	            					FROM crowdsourcing.choose
						            WHERE task = 6 
						            GROUP BY answer)
	
2018-10-22 21:13:29.087 CEST [3693] ERROR:  column "num" does not exist at character 154
2018-10-22 21:13:29.087 CEST [3693] STATEMENT:  SELECT answer, count(all answer) as num
	            FROM crowdsourcing.choose
	            WHERE task = 6 
	            GROUP BY answer
	            having num >= ALL(SElect count(all answer) as num
	            					FROM crowdsourcing.choose
						            WHERE task = 6 
						            GROUP BY answer)
				
	            ORDER BY num DESC	        
	
2018-10-22 21:20:21.448 CEST [3693] ERROR:  syntax error at or near "langage" at character 1006
2018-10-22 21:20:21.448 CEST [3693] STATEMENT:  CREATE OR REPLACE FUNCTION right_answer(task_id INTEGER)
	RETURNS SETOF VARCHAR(100) AS $$
	    DECLARE
	        majority BOOLEAN;
	    BEGIN
	        SELECT valid_bit
	        FROM crowdsourcing.task
	        WHERE id=task_id
	        INTO majority;
	
	        if(majority) then
	        
	            for ans in  SELECT answer, count(all answer) as num
	                        FROM crowdsourcing.choose
	                        WHERE task = task_id 
	                        GROUP BY answer
	                        having count(all answer) >= ALL(SELECT count(all answer) as num
	                                                        FROM crowdsourcing.choose
	                                                        WHERE task = 6 
	                                                        GROUP BY answer)
	                        ORDER BY num DESC
	            loop 
	                RETURN NEXT ans
	            end loop;
	            RETURN;
	
	        else
	            RETURN 'NO_MAJORITY';
	        end if;
	
	    END;
	$$ langage plpgsql;
2018-10-22 21:20:28.302 CEST [3693] ERROR:  loop variable of loop over rows must be a record or row variable or list of scalar variables at character 296
2018-10-22 21:20:28.302 CEST [3693] STATEMENT:  CREATE OR REPLACE FUNCTION right_answer(task_id INTEGER)
	RETURNS SETOF VARCHAR(100) AS $$
	    DECLARE
	        majority BOOLEAN;
	    BEGIN
	        SELECT valid_bit
	        FROM crowdsourcing.task
	        WHERE id=task_id
	        INTO majority;
	
	        if(majority) then
	        
	            for ans in  SELECT answer, count(all answer) as num
	                        FROM crowdsourcing.choose
	                        WHERE task = task_id 
	                        GROUP BY answer
	                        having count(all answer) >= ALL(SELECT count(all answer) as num
	                                                        FROM crowdsourcing.choose
	                                                        WHERE task = 6 
	                                                        GROUP BY answer)
	                        ORDER BY num DESC
	            loop 
	                RETURN NEXT ans
	            end loop;
	            RETURN;
	
	        else
	            RETURN 'NO_MAJORITY';
	        end if;
	
	    END;
	$$ language plpgsql;
2018-10-22 21:21:37.006 CEST [3693] ERROR:  syntax error at or near "end" at character 937
2018-10-22 21:21:37.006 CEST [3693] STATEMENT:  CREATE OR REPLACE FUNCTION right_answer(task_id INTEGER)
	RETURNS SETOF VARCHAR(100) AS $$
	    DECLARE
	        majority BOOLEAN;
	        ans crowdsourcing.choose.answer%TYPE;
	    BEGIN
	        SELECT valid_bit
	        FROM crowdsourcing.task
	        WHERE id=task_id
	        INTO majority;
	
	        if(majority) then
	
	            for ans in  SELECT answer, count(all answer) as num
	                        FROM crowdsourcing.choose
	                        WHERE task = task_id 
	                        GROUP BY answer
	                        having count(all answer) >= ALL(SELECT count(all answer) as num
	                                                        FROM crowdsourcing.choose
	                                                        WHERE task = 6 
	                                                        GROUP BY answer)
	                        ORDER BY num DESC
	            loop 
	                RETURN NEXT ans
	            end loop;
	            RETURN;
	
	        else
	            RETURN 'NO_MAJORITY';
	        end if;
	
	    END;
	$$ language plpgsql;
2018-10-22 21:21:54.094 CEST [3693] ERROR:  RETURN cannot have a parameter in function returning set at character 1001
2018-10-22 21:21:54.094 CEST [3693] HINT:  Use RETURN NEXT or RETURN QUERY.
2018-10-22 21:21:54.094 CEST [3693] STATEMENT:  CREATE OR REPLACE FUNCTION right_answer(task_id INTEGER)
	RETURNS SETOF VARCHAR(100) AS $$
	    DECLARE
	        majority BOOLEAN;
	        ans crowdsourcing.choose.answer%TYPE;
	    BEGIN
	        SELECT valid_bit
	        FROM crowdsourcing.task
	        WHERE id=task_id
	        INTO majority;
	
	        if(majority) then
	
	            for ans in  SELECT answer, count(all answer) as num
	                        FROM crowdsourcing.choose
	                        WHERE task = task_id 
	                        GROUP BY answer
	                        having count(all answer) >= ALL(SELECT count(all answer) as num
	                                                        FROM crowdsourcing.choose
	                                                        WHERE task = 6 
	                                                        GROUP BY answer)
	                        ORDER BY num DESC
	            loop 
	                RETURN NEXT ans;
	            end loop;
	            RETURN;
	
	        else
	            RETURN 'NO_MAJORITY';
	        end if;
	
	    END;
	$$ language plpgsql;
2018-10-22 21:41:59.683 CEST [3693] ERROR:  loop variable of loop over rows must be a record or row variable or list of scalar variables at character 537
2018-10-22 21:41:59.683 CEST [3693] STATEMENT:  CREATE OR REPLACE FUNCTION check_majority()
	RETURNS TRIGGER as $$
	declare
	    num_workers INTEGER;
	    threshold INTEGER;
	begin
	
	    select COUNT(*)
	    from crowdsourcing.choose as CH 
	    where CH.task = NEW.task
	    into num_workers;
	
	    select threshold
	    from crowdsourcing.task AS T
	    into threshold;
	
	
	    if(num_workers >= threshold) then
	        --- task update to valid ----
	        update crowdsourcing.task set valid_bit=TRUE WHERE id=NEW.id;
	
	        --- every work answered correctly update to valid ----
	        for worker_id in SELECT * FROM crowdsourcing.recives_task WHERE task=NEW.task and answer IN(select * from right_answer(NEW.task))
	        loop 
	            UPDATE crowdsourcing.recives_task SET valid_bit_user=TRUE WHERE worker=worker_id;
	        end loop;
	    end if;
	
	end;
	$$ language plpgsql;
2018-10-22 21:42:55.952 CEST [3693] ERROR:  invalid type name "crowdsourching.worker.id%TYPE" at character 137
2018-10-22 21:42:55.952 CEST [3693] STATEMENT:  CREATE OR REPLACE FUNCTION check_majority()
	RETURNS TRIGGER as $$
	declare
	    num_workers INTEGER;
	    threshold INTEGER;
	    worker_id crowdsourching.worker.id%TYPE;
	begin
	
	    select COUNT(*)
	    from crowdsourcing.choose as CH 
	    where CH.task = NEW.task
	    into num_workers;
	
	    select threshold
	    from crowdsourcing.task AS T
	    into threshold;
	
	
	    if(num_workers >= threshold) then
	        --- task update to valid ----
	        update crowdsourcing.task set valid_bit=TRUE WHERE id=NEW.id;
	
	        --- every work answered correctly update to valid ----
	        for worker_id in SELECT * FROM crowdsourcing.recives_task WHERE task=NEW.task and answer IN(select * from right_answer(NEW.task))
	        loop 
	            UPDATE crowdsourcing.recives_task SET valid_bit_user=TRUE WHERE worker=worker_id;
	        end loop;
	    end if;
	
	end;
	$$ language plpgsql;
2018-10-22 21:43:34.676 CEST [3693] ERROR:  invalid type name "crowdsourcing.worker.id%TYPE" at character 137
2018-10-22 21:43:34.676 CEST [3693] STATEMENT:  CREATE OR REPLACE FUNCTION check_majority()
	RETURNS TRIGGER as $$
	declare
	    num_workers INTEGER;
	    threshold INTEGER;
	    worker_id crowdsourcing.worker.id%TYPE;
	begin
	
	    select COUNT(*)
	    from crowdsourcing.choose as CH 
	    where CH.task = NEW.task
	    into num_workers;
	
	    select threshold
	    from crowdsourcing.task AS T
	    into threshold;
	
	
	    if(num_workers >= threshold) then
	        --- task update to valid ----
	        update crowdsourcing.task set valid_bit=TRUE WHERE id=NEW.id;
	
	        --- every work answered correctly update to valid ----
	        for worker_id in SELECT * FROM crowdsourcing.recives_task WHERE task=NEW.task and answer IN(select * from right_answer(NEW.task))
	        loop 
	            UPDATE crowdsourcing.recives_task SET valid_bit_user=TRUE WHERE worker=worker_id;
	        end loop;
	    end if;
	
	end;
	$$ language plpgsql;
2018-10-22 21:48:16.070 CEST [3693] ERROR:  duplicate key value violates unique constraint "choose_pkey"
2018-10-22 21:48:16.070 CEST [3693] DETAIL:  Key (worker, task)=(us, 37) already exists.
2018-10-22 21:48:16.070 CEST [3693] STATEMENT:  BEGIN;
	INSERT INTO "crowdsourcing"."choose"("worker", "task", "answer") VALUES('us', 37, 'Spam') RETURNING "worker", "task", "answer";
	
2018-10-22 21:52:31.764 CEST [3693] ERROR:  column reference "threshold" is ambiguous at character 8
2018-10-22 21:52:31.764 CEST [3693] DETAIL:  It could refer to either a PL/pgSQL variable or a table column.
2018-10-22 21:52:31.764 CEST [3693] QUERY:  select threshold
	    from crowdsourcing.task AS T
2018-10-22 21:52:31.764 CEST [3693] CONTEXT:  PL/pgSQL function check_majority() line 13 at SQL statement
2018-10-22 21:52:31.764 CEST [3693] STATEMENT:  BEGIN;
	INSERT INTO "crowdsourcing"."choose"("worker", "task", "answer") VALUES('pc', 37, 'Spam') RETURNING "worker", "task", "answer";
	INSERT INTO "crowdsourcing"."choose"("worker", "task", "answer") VALUES('tc', 37, 'Spam') RETURNING "worker", "task", "answer";
	
2018-10-22 21:52:43.252 CEST [3693] ERROR:  column reference "threshold" is ambiguous at character 8
2018-10-22 21:52:43.252 CEST [3693] DETAIL:  It could refer to either a PL/pgSQL variable or a table column.
2018-10-22 21:52:43.252 CEST [3693] QUERY:  select threshold
	    from crowdsourcing.task AS T
2018-10-22 21:52:43.252 CEST [3693] CONTEXT:  PL/pgSQL function check_majority() line 13 at SQL statement
2018-10-22 21:52:43.252 CEST [3693] STATEMENT:  BEGIN;
	INSERT INTO "crowdsourcing"."choose"("worker", "task", "answer") VALUES('pc', 37, 'Spam') RETURNING "worker", "task", "answer";
	INSERT INTO "crowdsourcing"."choose"("worker", "task", "answer") VALUES('tc', 37, 'Spam') RETURNING "worker", "task", "answer";
	
2018-10-22 21:53:57.664 CEST [3693] ERROR:  control reached end of trigger procedure without RETURN
2018-10-22 21:53:57.664 CEST [3693] CONTEXT:  PL/pgSQL function check_majority()
2018-10-22 21:53:57.664 CEST [3693] STATEMENT:  BEGIN;
	INSERT INTO "crowdsourcing"."choose"("worker", "task", "answer") VALUES('pc', 37, 'Spam') RETURNING "worker", "task", "answer";
	INSERT INTO "crowdsourcing"."choose"("worker", "task", "answer") VALUES('tc', 37, 'Spam') RETURNING "worker", "task", "answer";
	
2018-10-22 21:54:31.254 CEST [3693] ERROR:  missing expression at or near ";" at character 877
2018-10-22 21:54:31.254 CEST [3693] STATEMENT:  CREATE OR REPLACE FUNCTION check_majority()
	RETURNS TRIGGER as $$
	declare
	    num_workers INTEGER;
	    task_threshold INTEGER;
	    worker_id crowdsourcing.worker.user_name%TYPE;
	begin
	
	    select COUNT(*)
	    from crowdsourcing.choose as CH 
	    where CH.task = NEW.task
	    into num_workers;
	
	    select threshold
	    from crowdsourcing.task AS T
	    into task_threshold;
	
	
	    if(num_workers >= task_threshold) then
	        --- task update to valid ----
	        update crowdsourcing.task set valid_bit=TRUE WHERE id=NEW.id;
	
	        --- every work answered correctly update to valid ----
	        for worker_id in SELECT * FROM crowdsourcing.recives_task WHERE task=NEW.task and answer IN(select * from right_answer(NEW.task))
	        loop 
	            UPDATE crowdsourcing.recives_task SET valid_bit_user=TRUE WHERE worker=worker_id;
	        end loop;
	    end if;
	    RETURN;
	    
	end;
	$$ language plpgsql;
2018-10-22 21:57:58.162 CEST [3693] ERROR:  syntax error at or near "into" at character 87
2018-10-22 21:57:58.162 CEST [3693] STATEMENT:  select COUNT(*)
	    from crowdsourcing.choose as CH 
	    where CH.task = NEW.task
	    into num_workers;
	
2018-10-22 21:58:04.268 CEST [3693] ERROR:  missing FROM-clause entry for table "new" at character 74
2018-10-22 21:58:04.268 CEST [3693] STATEMENT:  select COUNT(*)
	    from crowdsourcing.choose as CH 
	    where CH.task = NEW.task
	
2018-10-22 22:01:35.410 CEST [3693] ERROR:  null value in column "valid_bit" violates not-null constraint
2018-10-22 22:01:35.410 CEST [3693] DETAIL:  Failing row contains (32, Una nana bianca (o nana degenere) è una stella di piccole dimen..., Nana Bianca, 30, 10, null, 11, coupon, museum tour).
2018-10-22 22:01:35.410 CEST [3693] STATEMENT:  BEGIN;
	UPDATE "crowdsourcing"."task" SET "valid_bit"=NULL WHERE "id"=6 OR "id"=7 OR "id"=31 OR "id"=32 OR "id"=34 OR "id"=35 OR "id"=36 OR "id"=37 OR "id"=38 OR "id"=39 OR "id"=40 OR "id"=41 OR "id"=42 RETURNING "id", "description", "title", "n_workers", "threshold", "valid_bit", "campaign", "pay_type", "pay_description";
	
2018-10-22 22:01:56.622 CEST [3693] ERROR:  null value in column "valid_bit" violates not-null constraint
2018-10-22 22:01:56.622 CEST [3693] DETAIL:  Failing row contains (32, Una nana bianca (o nana degenere) è una stella di piccole dimen..., Nana Bianca, 30, 10, null, 11, coupon, museum tour).
2018-10-22 22:01:56.622 CEST [3693] STATEMENT:  BEGIN;
	UPDATE "crowdsourcing"."task" SET "valid_bit"=NULL WHERE "id"=6 OR "id"=7 OR "id"=31 OR "id"=32 OR "id"=34 OR "id"=35 OR "id"=36 OR "id"=37 OR "id"=38 OR "id"=39 OR "id"=40 OR "id"=41 OR "id"=42 RETURNING "id", "description", "title", "n_workers", "threshold", "valid_bit", "campaign", "pay_type", "pay_description";
	
2018-10-22 22:01:59.474 CEST [3693] ERROR:  null value in column "valid_bit" violates not-null constraint
2018-10-22 22:01:59.474 CEST [3693] DETAIL:  Failing row contains (32, Una nana bianca (o nana degenere) è una stella di piccole dimen..., Nana Bianca, 30, 10, null, 11, coupon, museum tour).
2018-10-22 22:01:59.474 CEST [3693] STATEMENT:  BEGIN;
	UPDATE "crowdsourcing"."task" SET "valid_bit"=NULL WHERE "id"=6 OR "id"=7 OR "id"=31 OR "id"=32 OR "id"=34 OR "id"=35 OR "id"=36 OR "id"=37 OR "id"=38 OR "id"=39 OR "id"=40 OR "id"=41 OR "id"=42 RETURNING "id", "description", "title", "n_workers", "threshold", "valid_bit", "campaign", "pay_type", "pay_description";
	
2018-10-22 22:13:50.026 CEST [3693] ERROR:  record "new" has no field "id"
2018-10-22 22:13:50.026 CEST [3693] CONTEXT:  SQL statement "update crowdsourcing.task set valid_bit=FALSE WHERE id=NEW.id"
	PL/pgSQL function check_majority() line 38 at SQL statement
2018-10-22 22:13:50.026 CEST [3693] STATEMENT:  BEGIN;
	INSERT INTO "crowdsourcing"."choose"("worker", "task", "answer") VALUES('us', 37, 'Not Spam') RETURNING "worker", "task", "answer";
	
2018-10-22 22:24:25.844 CEST [3693] ERROR:  cannot change return type of existing function
2018-10-22 22:24:25.844 CEST [3693] HINT:  Use DROP FUNCTION right_answer(integer) first.
2018-10-22 22:24:25.844 CEST [3693] STATEMENT:  CREATE OR REPLACE FUNCTION right_answer(task_id INTEGER)
	RETURNS TABLE(answer VARCHAR(100), num_ans INTEGER) AS $$
	    DECLARE
	    BEGIN
	   
	        RETURN QUERY    SELECT answer, count(all answer) as num
	                        FROM crowdsourcing.choose
	                        WHERE task = task_id 
	                        GROUP BY answer
	                        having count(all answer) >= ALL(SELECT count(all answer) as num
	                                                        FROM crowdsourcing.choose
	                                                        WHERE task = task_id 
	                                                        GROUP BY answer)
	                        ORDER BY num DESC
	        RETURN;
	    END;
	$$ language plpgsql;
2018-10-22 22:24:38.535 CEST [3693] ERROR:  syntax error at or near "RETURN" at character 713
2018-10-22 22:24:38.535 CEST [3693] STATEMENT:  CREATE OR REPLACE FUNCTION right_answer(task_id INTEGER)
	RETURNS TABLE(answer VARCHAR(100), num_ans INTEGER) AS $$
	    DECLARE
	    BEGIN
	   
	        RETURN QUERY    SELECT answer, count(all answer) as num
	                        FROM crowdsourcing.choose
	                        WHERE task = task_id 
	                        GROUP BY answer
	                        having count(all answer) >= ALL(SELECT count(all answer) as num
	                                                        FROM crowdsourcing.choose
	                                                        WHERE task = task_id 
	                                                        GROUP BY answer)
	                        ORDER BY num DESC
	        RETURN;
	    END;
	$$ language plpgsql;
2018-10-22 22:25:15.787 CEST [3693] ERROR:  syntax error at or near "right_answer" at character 1
2018-10-22 22:25:15.787 CEST [3693] STATEMENT:  right_answer(6)
	;
2018-10-22 22:25:30.229 CEST [3693] ERROR:  column reference "answer" is ambiguous at character 8
2018-10-22 22:25:30.229 CEST [3693] DETAIL:  It could refer to either a PL/pgSQL variable or a table column.
2018-10-22 22:25:30.229 CEST [3693] QUERY:  SELECT answer, count(all answer) as num
	                        FROM crowdsourcing.choose
	                        WHERE task = task_id 
	                        GROUP BY answer
	                        having count(all answer) >= ALL(SELECT count(all answer) as num
	                                                        FROM crowdsourcing.choose
	                                                        WHERE task = task_id 
	                                                        GROUP BY answer)
	                        ORDER BY num DESC
2018-10-22 22:25:30.229 CEST [3693] CONTEXT:  PL/pgSQL function right_answer(integer) line 5 at RETURN QUERY
2018-10-22 22:25:30.229 CEST [3693] STATEMENT:  select * from right_answer(6)
	;
2018-10-22 22:26:16.683 CEST [3693] ERROR:  cannot change return type of existing function
2018-10-22 22:26:16.683 CEST [3693] DETAIL:  Row type defined by OUT parameters is different.
2018-10-22 22:26:16.683 CEST [3693] HINT:  Use DROP FUNCTION right_answer(integer) first.
2018-10-22 22:26:16.683 CEST [3693] STATEMENT:  CREATE OR REPLACE FUNCTION right_answer(task_id INTEGER)
	RETURNS TABLE(right_answer VARCHAR(100), num_ans INTEGER) AS $$
	    DECLARE
	    BEGIN
	   
	        RETURN QUERY    SELECT answer, count(all answer) as num
	                        FROM crowdsourcing.choose
	                        WHERE task = task_id 
	                        GROUP BY answer
	                        having count(all answer) >= ALL(SELECT count(all answer) as num
	                                                        FROM crowdsourcing.choose
	                                                        WHERE task = task_id 
	                                                        GROUP BY answer)
	                        ORDER BY num DESC;
	    END;
	$$ language plpgsql;
2018-10-22 22:26:35.965 CEST [3693] ERROR:  structure of query does not match function result type
2018-10-22 22:26:35.965 CEST [3693] DETAIL:  Returned type bigint does not match expected type integer in column 2.
2018-10-22 22:26:35.965 CEST [3693] CONTEXT:  PL/pgSQL function right_answer(integer) line 5 at RETURN QUERY
2018-10-22 22:26:35.965 CEST [3693] STATEMENT:  select * from right_answer(6)
	;
2018-10-22 22:28:36.774 CEST [3693] ERROR:  cannot change return type of existing function
2018-10-22 22:28:36.774 CEST [3693] DETAIL:  Row type defined by OUT parameters is different.
2018-10-22 22:28:36.774 CEST [3693] HINT:  Use DROP FUNCTION right_answer(integer) first.
2018-10-22 22:28:36.774 CEST [3693] STATEMENT:  CREATE OR REPLACE FUNCTION right_answer(task_id INTEGER)
	RETURNS TABLE(right_answer VARCHAR(100), num_ans BIGINT) AS $$
	    DECLARE
	    BEGIN
	   
	        RETURN QUERY    SELECT answer, count(all answer) as num
	                        FROM crowdsourcing.choose
	                        WHERE task = task_id 
	                        GROUP BY answer
	                        having count(all answer) >= ALL(SELECT count(all answer) as num
	                                                        FROM crowdsourcing.choose
	                                                        WHERE task = task_id 
	                                                        GROUP BY answer)
	                        ORDER BY num DESC;
	    END;
	$$ language plpgsql;
2018-10-22 22:49:47.834 CEST [3693] ERROR:  record "new" has no field "id"
2018-10-22 22:49:47.834 CEST [3693] CONTEXT:  SQL statement "update crowdsourcing.task set valid_bit=TRUE WHERE id=NEW.id"
	PL/pgSQL function check_majority() line 35 at SQL statement
2018-10-22 22:49:47.834 CEST [3693] STATEMENT:  BEGIN;
	INSERT INTO "crowdsourcing"."choose"("worker", "task", "answer") VALUES('us', 37, 'Not Spam') RETURNING "worker", "task", "answer";
	
2018-10-22 22:50:39.517 CEST [3693] ERROR:  column "answer" does not exist at character 66
2018-10-22 22:50:39.517 CEST [3693] QUERY:  SELECT * FROM crowdsourcing.recives_task WHERE task=NEW.task and answer IN(select right_answer from right_answer(NEW.task))
2018-10-22 22:50:39.517 CEST [3693] CONTEXT:  PL/pgSQL function check_majority() line 38 at FOR over SELECT rows
2018-10-22 22:50:39.517 CEST [3693] STATEMENT:  BEGIN;
	INSERT INTO "crowdsourcing"."choose"("worker", "task", "answer") VALUES('us', 37, 'Not Spam') RETURNING "worker", "task", "answer";
	
2018-10-22 22:58:25.645 CEST [3693] ERROR:  subquery has too many columns at character 394
2018-10-22 22:58:25.645 CEST [3693] QUERY:  SELECT * FROM crowdsourcing.recives_task WHERE task=NEW.task and worker IN(select C.worker 
	                                                                                                    from crowdsourcing.worker as W JOIN crowdsourcing.choose as C on W.user_name=C.worker
	                                                                                                    where C.answer IN (select *  from right_answer(NEW.task)))
2018-10-22 22:58:25.645 CEST [3693] CONTEXT:  PL/pgSQL function check_majority() line 38 at FOR over SELECT rows
2018-10-22 22:58:25.645 CEST [3693] STATEMENT:  BEGIN;
	INSERT INTO "crowdsourcing"."choose"("worker", "task", "answer") VALUES('us', 37, 'Not Spam') RETURNING "worker", "task", "answer";
	
2018-10-22 23:04:46.340 CEST [2189] LOG:  received smart shutdown request
2018-10-22 23:04:46.341 CEST [2189] LOG:  worker process: logical replication launcher (PID 2196) exited with exit code 1
2018-10-22 23:04:46.341 CEST [2191] LOG:  shutting down
2018-10-22 23:04:46.346 CEST [2189] LOG:  database system is shut down
2018-10-23 17:22:04.848 CEST [1587] LOG:  listening on IPv6 address "::1", port 5432
2018-10-23 17:22:04.848 CEST [1587] LOG:  listening on IPv4 address "127.0.0.1", port 5432
2018-10-23 17:22:04.849 CEST [1587] LOG:  listening on Unix socket "/tmp/.s.PGSQL.5432"
2018-10-23 17:22:04.883 CEST [1588] LOG:  database system was shut down at 2018-10-22 23:04:46 CEST
2018-10-23 17:22:04.893 CEST [1587] LOG:  database system is ready to accept connections
2018-10-23 17:35:22.425 CEST [1602] ERROR:  duplicate key value violates unique constraint "choose_pkey"
2018-10-23 17:35:22.425 CEST [1602] DETAIL:  Key (worker, task)=(us, 37) already exists.
2018-10-23 17:35:22.425 CEST [1602] STATEMENT:  INSERT INTO "crowdsourcing"."choose"("worker", "task", "answer") VALUES('pc', 37, 'Spam') RETURNING "worker", "task", "answer";
	INSERT INTO "crowdsourcing"."choose"("worker", "task", "answer") VALUES('tc', 37, 'Spam') RETURNING "worker", "task", "answer";
	INSERT INTO "crowdsourcing"."choose"("worker", "task", "answer") VALUES('us', 37, 'Not Spam') RETURNING "worker", "task", "answer";
2018-10-23 17:55:21.717 CEST [1602] ERROR:  duplicate key value violates unique constraint "choose_pkey"
2018-10-23 17:55:21.717 CEST [1602] DETAIL:  Key (worker, task)=(us, 37) already exists.
2018-10-23 17:55:21.717 CEST [1602] STATEMENT:  INSERT INTO "crowdsourcing"."recives_task"("task", "worker") VALUES(37, 'pc') RETURNING "task", "worker", "valid_bit_user";
	INSERT INTO "crowdsourcing"."recives_task"("task", "worker") VALUES(37, 'tc') RETURNING "task", "worker", "valid_bit_user";
	INSERT INTO "crowdsourcing"."recives_task"("task", "worker") VALUES(37, 'us') RETURNING "task", "worker", "valid_bit_user";
	
	
	INSERT INTO "crowdsourcing"."choose"("worker", "task", "answer") VALUES('pc', 37, 'Spam') RETURNING "worker", "task", "answer";
	INSERT INTO "crowdsourcing"."choose"("worker", "task", "answer") VALUES('tc', 37, 'Spam') RETURNING "worker", "task", "answer";
	INSERT INTO "crowdsourcing"."choose"("worker", "task", "answer") VALUES('us', 37, 'Not Spam') RETURNING "worker", "task", "answer";
2018-10-23 18:07:11.377 CEST [1602] ERROR:  syntax error at or near "for" at character 1
2018-10-23 18:07:11.377 CEST [1602] STATEMENT:  for worker_id in SELECT * FROM crowdsourcing.recives_task WHERE task=NEW.task and worker IN(select C.worker 
	                                                                                                    from crowdsourcing.choose as C
	                                                                                                    where C.answer IN (select right_answer from right_answer(NEW.task)))
	        loop 
	            UPDATE crowdsourcing.recives_task SET valid_bit_user=TRUE WHERE worker=worker_id and task=NEW.task;
	        end loop;
	
2018-10-23 18:12:07.278 CEST [1602] ERROR:  loop variable of loop over rows must be a record or row variable or list of scalar variables at character 915
2018-10-23 18:12:07.278 CEST [1602] STATEMENT:  
	CREATE OR REPLACE FUNCTION check_majority()
	RETURNS TRIGGER as $$
	declare
	    num_workers INTEGER;
	    worker_requested INTEGER;
	    task_threshold INTEGER;
	    requested_threshold INTEGER;
	begin
	
	    select COUNT(*)
	    from crowdsourcing.choose as CH 
	    where CH.task = NEW.task
	    into num_workers;
	
	    select n_workers
	    from crowdsourcing.task AS T
	    where T.id=NEW.task
	    into worker_requested;
	
	    select (num_ans*100)/num_workers
	    from right_answer(NEW.task) AS R
	    limit 1
	    into task_threshold;
	
	    select threshold
	    from crowdsourcing.task AS T
	    where T.id=NEW.task
	    into requested_threshold;
	
	
	
	    if((num_workers >= worker_requested) and (task_threshold >= requested_threshold)) then
	
	        --- task update to valid ----
	        update crowdsourcing.task set valid_bit=TRUE WHERE id=NEW.task;
	
	        --- every work answered correctly update to valid ----
	        for worker_id in SELECT * FROM crowdsourcing.recives_task WHERE task=NEW.task and worker IN(select C.worker 
	                                                                                                    from crowdsourcing.choose as C
	                                                                                                    where C.answer IN (select right_answer from right_answer(NEW.task)))
	        loop 
	            UPDATE crowdsourcing.recives_task SET valid_bit_user=TRUE WHERE worker=NEW.worker and task=NEW.task;
	        end loop;
	
	    elseif(num_workers >= worker_requested) then
	        --- task update to not valid ----
	        update crowdsourcing.task set valid_bit=FALSE WHERE id=NEW.task;
	
	    end if;
	    RETURN NEW;
	    
	end;
	$$ language plpgsql;
	
2018-10-23 18:14:11.153 CEST [1602] ERROR:  syntax error at or near "check_majority" at character 1
2018-10-23 18:14:11.153 CEST [1602] STATEMENT:  check_majority()
2018-10-23 18:14:19.234 CEST [1602] ERROR:  function "check_majority" in FROM has unsupported return type trigger at character 15
2018-10-23 18:14:19.234 CEST [1602] STATEMENT:  Select * from check_majority()
2018-10-23 18:36:56.445 CEST [1587] LOG:  received smart shutdown request
2018-10-23 18:36:56.446 CEST [1587] LOG:  worker process: logical replication launcher (PID 1594) exited with exit code 1
2018-10-23 18:36:56.446 CEST [1589] LOG:  shutting down
2018-10-23 18:36:56.456 CEST [1587] LOG:  database system is shut down
2018-10-30 16:14:37.635 CET [1021] LOG:  listening on IPv6 address "::1", port 5432
2018-10-30 16:14:37.635 CET [1021] LOG:  listening on IPv4 address "127.0.0.1", port 5432
2018-10-30 16:14:37.636 CET [1021] LOG:  listening on Unix socket "/tmp/.s.PGSQL.5432"
2018-10-30 16:14:37.667 CET [1022] LOG:  database system was shut down at 2018-10-23 18:36:56 CEST
2018-10-30 16:14:37.675 CET [1021] LOG:  database system is ready to accept connections
2018-10-30 17:12:12.820 CET [1286] ERROR:  column "score" contains null values
2018-10-30 17:12:12.820 CET [1286] STATEMENT:  ALTER TABLE "crowdsourcing"."joins_campaign"
	  ADD COLUMN "score" integer NOT NULL,
	  ADD CHECK (score>=0);
	
2018-10-30 17:52:43.933 CET [1021] LOG:  received smart shutdown request
2018-10-30 17:52:43.935 CET [1021] LOG:  worker process: logical replication launcher (PID 1028) exited with exit code 1
2018-10-30 17:52:43.935 CET [1023] LOG:  shutting down
2018-10-30 17:52:43.944 CET [1021] LOG:  database system is shut down
2018-11-16 11:50:25.747 CET [1220] LOG:  listening on IPv6 address "::1", port 5432
2018-11-16 11:50:25.747 CET [1220] LOG:  listening on IPv4 address "127.0.0.1", port 5432
2018-11-16 11:50:25.748 CET [1220] LOG:  listening on Unix socket "/tmp/.s.PGSQL.5432"
2018-11-16 11:50:25.780 CET [1221] LOG:  database system was shut down at 2018-11-12 23:15:06 CET
2018-11-16 11:50:25.787 CET [1220] LOG:  database system is ready to accept connections
2018-11-16 11:51:03.905 CET [1235] ERROR:  value too long for type character varying(20)
2018-11-16 11:51:03.905 CET [1235] STATEMENT:  BEGIN;
	INSERT INTO "crowdsourcing"."worker"("user_name", "name") VALUES('lastrange', 'non disponibile - vd tomba Lastrange') RETURNING "user_name", "password", "name", "surname";
	
2018-11-16 11:51:12.277 CET [1235] ERROR:  null value in column "password" violates not-null constraint
2018-11-16 11:51:12.277 CET [1235] DETAIL:  Failing row contains (lastrange, null, vd tomba Lastrange, null).
2018-11-16 11:51:12.277 CET [1235] STATEMENT:  BEGIN;
	INSERT INTO "crowdsourcing"."worker"("user_name", "name") VALUES('lastrange', 'vd tomba Lastrange') RETURNING "user_name", "password", "name", "surname";
	
2018-11-16 11:53:36.469 CET [1235] ERROR:  column "lastrange" does not exist at character 55
2018-11-16 11:53:36.469 CET [1235] STATEMENT:  select name
	from crowdsourcing.worker
	where user_name="lastrange";
2018-11-16 11:54:11.894 CET [1235] ERROR:  column "lastrange" does not exist at character 64
2018-11-16 11:54:11.894 CET [1235] STATEMENT:  select C.name
	from crowdsourcing.worker as C
	where C.user_name="lastrange";
2018-11-16 11:54:26.388 CET [1235] ERROR:  column "lastrange" does not exist at character 65
2018-11-16 11:54:26.388 CET [1235] STATEMENT:  select C.name
	from crowdsourcing.worker as C
	where C.user_name=="lastrange";
2018-11-16 11:55:06.268 CET [1235] ERROR:  unterminated quoted string at or near "'lastrange
	;
	" at character 64
2018-11-16 11:55:06.268 CET [1235] STATEMENT:  select C.name
	from crowdsourcing.worker as C
	where C.user_name='lastrange
	;
	
2018-11-16 13:55:09.035 CET [1383] ERROR:  function score_update() does not exist
2018-11-16 13:55:09.035 CET [1383] STATEMENT:  CREATE TRIGGER worker_score_update AFTER UPDATE of valid_bit ON crowdsourcing.task
	FOR EACH ROW
	    execute procedure score_update();
2018-11-16 13:55:12.688 CET [1383] ERROR:  syntax error at or near "END" at character 367
2018-11-16 13:55:12.688 CET [1383] STATEMENT:  CREATE OR REPLACE FUNCTION score_update()
	RETURNS TRIGGER AS $$
	    DECLARE
	    BEGIN
	        UPDATE crowdsourcing.joins_campaign SET score = score+1
	        WHERE worker IN (   SELECT R.worker
	                            FROM crowdsourcing.recives_task AS R 
	                            WHERE R.task=NEW.task and R.valid_bit_user=true
	                        )
	    END;
	$$ language plpgsql;
2018-11-16 13:57:58.691 CET [1383] ERROR:  missing "THEN" at end of SQL expression at character 394
2018-11-16 13:57:58.691 CET [1383] STATEMENT:  CREATE OR REPLACE FUNCTION score_update()
	RETURNS TRIGGER AS $$
	    DECLARE
	    BEGIN
	        if(NEW.valid_bit==true)
	        UPDATE crowdsourcing.joins_campaign SET score = score+1
	        WHERE worker IN (   SELECT R.worker
	                            FROM crowdsourcing.recives_task AS R 
	                            WHERE R.task=NEW.task and R.valid_bit_user=true
	                        );
	        end if;
	    END;
	$$ language plpgsql;
2018-11-16 13:58:26.143 CET [1383] ERROR:  operator does not exist: boolean == boolean at character 22
2018-11-16 13:58:26.143 CET [1383] HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
2018-11-16 13:58:26.143 CET [1383] QUERY:  SELECT (NEW.valid_bit==true)
2018-11-16 13:58:26.143 CET [1383] CONTEXT:  PL/pgSQL function score_update() line 4 at IF
2018-11-16 13:58:26.143 CET [1383] STATEMENT:  BEGIN;
	UPDATE "crowdsourcing"."task" SET "valid_bit"=FALSE WHERE "id"=37 RETURNING "id", "description", "title", "n_workers", "threshold", "valid_bit", "campaign", "pay_type", "pay_description";
	
2018-11-16 13:58:46.323 CET [1383] ERROR:  operator does not exist: boolean == boolean at character 22
2018-11-16 13:58:46.323 CET [1383] HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
2018-11-16 13:58:46.323 CET [1383] QUERY:  SELECT (NEW.valid_bit==true)
2018-11-16 13:58:46.323 CET [1383] CONTEXT:  PL/pgSQL function score_update() line 4 at IF
2018-11-16 13:58:46.323 CET [1383] STATEMENT:  BEGIN;
	UPDATE "crowdsourcing"."task" SET "valid_bit"=FALSE WHERE "id"=37 RETURNING "id", "description", "title", "n_workers", "threshold", "valid_bit", "campaign", "pay_type", "pay_description";
	
2018-11-16 13:59:08.332 CET [1383] ERROR:  control reached end of trigger procedure without RETURN
2018-11-16 13:59:08.332 CET [1383] CONTEXT:  PL/pgSQL function score_update()
2018-11-16 13:59:08.332 CET [1383] STATEMENT:  BEGIN;
	UPDATE "crowdsourcing"."task" SET "valid_bit"=FALSE WHERE "id"=37 RETURNING "id", "description", "title", "n_workers", "threshold", "valid_bit", "campaign", "pay_type", "pay_description";
	
2018-11-16 14:00:09.741 CET [1383] WARNING:  there is no transaction in progress
2018-11-16 14:00:13.024 CET [1383] ERROR:  syntax error at or near "RETURNS" at character 424
2018-11-16 14:00:13.024 CET [1383] STATEMENT:  CREATE OR REPLACE FUNCTION score_update()
	RETURNS TRIGGER AS $$
	    DECLARE
	    BEGIN
	        if(NEW.valid_bit=true) then
	        UPDATE crowdsourcing.joins_campaign SET score = score+1
	        WHERE worker IN (   SELECT R.worker
	                            FROM crowdsourcing.recives_task AS R 
	                            WHERE R.task=NEW.task and R.valid_bit_user=true
	                        );
	        end if;
	        RETURNS TRIGGER;
	    END;
	$$ language plpgsql;
2018-11-16 14:00:27.908 CET [1383] ERROR:  column "trigger" does not exist at character 8
2018-11-16 14:00:27.908 CET [1383] QUERY:  SELECT TRIGGER
2018-11-16 14:00:27.908 CET [1383] CONTEXT:  PL/pgSQL function score_update() line 11 at RETURN
2018-11-16 14:00:27.908 CET [1383] STATEMENT:  BEGIN;
	UPDATE "crowdsourcing"."task" SET "valid_bit"=FALSE WHERE "id"=37 RETURNING "id", "description", "title", "n_workers", "threshold", "valid_bit", "campaign", "pay_type", "pay_description";
	
2018-11-16 14:02:37.169 CET [1383] ERROR:  record "new" has no field "task"
2018-11-16 14:02:37.169 CET [1383] CONTEXT:  SQL statement "UPDATE crowdsourcing.joins_campaign SET score = score+1
	        WHERE worker IN (   SELECT R.worker
	                            FROM crowdsourcing.recives_task AS R 
	                            WHERE R.task=NEW.task and R.valid_bit_user=true
	                        )"
	PL/pgSQL function score_update() line 5 at SQL statement
2018-11-16 14:02:37.169 CET [1383] STATEMENT:  BEGIN;
	UPDATE "crowdsourcing"."task" SET "valid_bit"=TRUE WHERE "id"=37 RETURNING "id", "description", "title", "n_workers", "threshold", "valid_bit", "campaign", "pay_type", "pay_description";
	
2018-11-16 15:03:14.954 CET [1645] ERROR:  syntax error at or near "top10" at character 1
2018-11-16 15:03:14.954 CET [1645] STATEMENT:  top10(17)
	
2018-11-16 15:03:28.764 CET [1645] ERROR:  column reference "worker" is ambiguous at character 8
2018-11-16 15:03:28.764 CET [1645] DETAIL:  It could refer to either a PL/pgSQL variable or a table column.
2018-11-16 15:03:28.764 CET [1645] QUERY:  SELECT worker, score
	                        FROM crowdsourcing.joins_campaign
	                        WHERE campaign=$1
	                        ORDER BY score DESC
	                        LIMIT 10
2018-11-16 15:03:28.764 CET [1645] CONTEXT:  PL/pgSQL function top10(integer) line 4 at RETURN QUERY
2018-11-16 15:03:28.764 CET [1645] STATEMENT:  SELEct * from top10(17)
	
2018-11-16 15:09:43.861 CET [1645] ERROR:  column "rownum" does not exist at character 8
2018-11-16 15:09:43.861 CET [1645] STATEMENT:  SELECT ROWNUM, worker, score
	                        FROM crowdsourcing.joins_campaign
	                        WHERE campaign=17
	                        ORDER BY score DESC
	                        LIMIT 10;
2018-11-16 15:09:48.159 CET [1645] ERROR:  function rownum() does not exist at character 8
2018-11-16 15:09:48.159 CET [1645] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2018-11-16 15:09:48.159 CET [1645] STATEMENT:  SELECT ROWNUM(), worker, score
	                        FROM crowdsourcing.joins_campaign
	                        WHERE campaign=17
	                        ORDER BY score DESC
	                        LIMIT 10;
2018-11-16 15:10:09.100 CET [1645] ERROR:  column "i" does not exist at character 8
2018-11-16 15:10:09.100 CET [1645] STATEMENT:  SELECT i=ROWNUM, worker, score
	                        FROM crowdsourcing.joins_campaign
	                        WHERE campaign=17
	                        ORDER BY score DESC
	                        LIMIT 10;
2018-11-16 15:10:21.416 CET [1645] ERROR:  column "rownum" does not exist at character 8
2018-11-16 15:10:21.416 CET [1645] STATEMENT:  SELECT ROWNUM as i, worker, score
	                        FROM crowdsourcing.joins_campaign
	                        WHERE campaign=17
	                        ORDER BY score DESC
	                        LIMIT 10;
2018-11-16 15:10:54.959 CET [1645] ERROR:  column "row_number" does not exist at character 8
2018-11-16 15:10:54.959 CET [1645] STATEMENT:  SELECT ROW_NUMber as i, worker, score
	                        FROM crowdsourcing.joins_campaign
	                        WHERE campaign=17
	                        ORDER BY score DESC
	                        LIMIT 10;
2018-11-16 15:10:58.479 CET [1645] ERROR:  window function row_number requires an OVER clause at character 8
2018-11-16 15:10:58.479 CET [1645] STATEMENT:  SELECT ROW_NUMber() as i, worker, score
	                        FROM crowdsourcing.joins_campaign
	                        WHERE campaign=17
	                        ORDER BY score DESC
	                        LIMIT 10;
2018-11-16 15:29:36.526 CET [1783] ERROR:  column "i" does not exist at character 8
2018-11-16 15:29:36.526 CET [1783] STATEMENT:  select i=i+1;
2018-11-16 15:31:29.303 CET [1783] ERROR:  column "i" does not exist at character 8
2018-11-16 15:31:29.303 CET [1783] STATEMENT:  SELECT i, J.worker, J.score
	                        FROM crowdsourcing.joins_campaign as J
	                        WHERE J.campaign=17 and i=1
	                        ORDER BY J.score DESC
	                        LIMIT 10;
2018-11-16 15:37:00.628 CET [1783] ERROR:  column "integer" does not exist at character 8
2018-11-16 15:37:00.628 CET [1783] STATEMENT:  SELECT integer, J.worker, J.score
	                        FROM crowdsourcing.joins_campaign as J
	                        WHERE J.campaign=17 and i=1
	                        ORDER BY J.score DESC
	                        LIMIT 10;
2018-11-16 16:09:02.461 CET [1783] ERROR:  cannot use RETURN QUERY in a non-SETOF function at character 295
2018-11-16 16:09:02.461 CET [1783] STATEMENT:  CREATE OR REPLACE FUNCTION standing_position(crowdsourcing.campaign.id%TYPE, crowdsourcing.worker.user_name%TYPE)
	RETURNS INTEGER AS $$
	    DECLARE
	        score_ INTEGER;
	    BEGIN
	        SELECT
	        FROM crowdsourcing.joins_campaign
	        WHERE worker=$2
	        INTO score_;
	
	
	        RETURN query    SELECT COUNT(*)+1 as position
	                        FROM crowdsourcing.joins_campaign as J
	                        WHERE J.campaign=$1 and J.worker IN(SELECT K.worker
	                                                            FROM crowdsourcing.joins_campaign as K
	                                                            WHERE K.score>score_);
	    END;
	$$ LANGUAGE plpgsql
	
2018-11-16 16:09:32.520 CET [1783] ERROR:  syntax error at or near "SELECT" at character 311
2018-11-16 16:09:32.520 CET [1783] STATEMENT:  CREATE OR REPLACE FUNCTION standing_position(crowdsourcing.campaign.id%TYPE, crowdsourcing.worker.user_name%TYPE)
	RETURNS INTEGER AS $$
	    DECLARE
	        score_ INTEGER;
	    BEGIN
	        SELECT
	        FROM crowdsourcing.joins_campaign
	        WHERE worker=$2
	        INTO score_;
	
	
	        RETURN          SELECT COUNT(*)+1 as position
	                        FROM crowdsourcing.joins_campaign as J
	                        WHERE J.campaign=$1 and J.worker IN(SELECT K.worker
	                                                            FROM crowdsourcing.joins_campaign as K
	                                                            WHERE K.score>score_);
	    END;
	$$ LANGUAGE plpgsql
	
	
2018-11-16 16:10:11.743 CET [1783] ERROR:  syntax error at or near "INTEGER" at character 129
2018-11-16 16:10:11.743 CET [1783] STATEMENT:  CREATE OR REPLACE FUNCTION standing_position(crowdsourcing.campaign.id%TYPE, crowdsourcing.worker.user_name%TYPE)
	RETURNS table(INTEGER) AS $$
	    DECLARE
	        score_ INTEGER;
	    BEGIN
	        SELECT
	        FROM crowdsourcing.joins_campaign
	        WHERE worker=$2
	        INTO score_;
	
	
	        RETURN query    SELECT COUNT(*)+1 as position
	                        FROM crowdsourcing.joins_campaign as J
	                        WHERE J.campaign=$1 and J.worker IN(SELECT K.worker
	                                                            FROM crowdsourcing.joins_campaign as K
	                                                            WHERE K.score>score_);
	    END;
	$$ LANGUAGE plpgsql
	
2018-11-16 16:10:56.492 CET [1783] ERROR:  column "zarc_o" does not exist at character 36
2018-11-16 16:10:56.492 CET [1783] STATEMENT:  select * from standing_position(17,zarc_O)
2018-11-16 16:11:06.899 CET [1783] ERROR:  structure of query does not match function result type
2018-11-16 16:11:06.899 CET [1783] DETAIL:  Returned type bigint does not match expected type integer in column 1.
2018-11-16 16:11:06.899 CET [1783] CONTEXT:  PL/pgSQL function standing_position(integer,character varying) line 11 at RETURN QUERY
2018-11-16 16:11:06.899 CET [1783] STATEMENT:  select * from standing_position(17,'zarc_O')
2018-11-16 16:12:59.871 CET [1783] ERROR:  structure of query does not match function result type
2018-11-16 16:12:59.871 CET [1783] DETAIL:  Returned type bigint does not match expected type integer in column 1.
2018-11-16 16:12:59.871 CET [1783] CONTEXT:  PL/pgSQL function standing_position(integer,character varying) line 11 at RETURN QUERY
2018-11-16 16:12:59.871 CET [1783] STATEMENT:  select * from standing_position(17,'zarc_O')
2018-11-16 16:13:24.656 CET [1783] ERROR:  cannot change return type of existing function
2018-11-16 16:13:24.656 CET [1783] HINT:  Use DROP FUNCTION standing_position(integer,character varying) first.
2018-11-16 16:13:24.656 CET [1783] STATEMENT:  CREATE OR REPLACE FUNCTION standing_position(crowdsourcing.campaign.id%TYPE, crowdsourcing.worker.user_name%TYPE)
	RETURNS table(pos BIGINT) AS $$
	    DECLARE
	        score_ INTEGER;
	    BEGIN
	        SELECT
	        FROM crowdsourcing.joins_campaign
	        WHERE worker=$2
	        INTO score_;
	
	
	        RETURN query    SELECT COUNT(*)+1 as position
	                        FROM crowdsourcing.joins_campaign as J
	                        WHERE J.campaign=$1 and J.worker IN(SELECT K.worker
	                                                            FROM crowdsourcing.joins_campaign as K
	                                                            WHERE K.score>score_);
	    END;
	$$ LANGUAGE plpgsql
	
2018-11-16 16:27:14.249 CET [1783] ERROR:  cannot use RETURN QUERY in a non-SETOF function at character 135
2018-11-16 16:27:14.249 CET [1783] STATEMENT:  CREATE OR REPLACE FUNCTION answered_task_num(crowdsourcing.worker.user_name%TYPE)
	RETURNS INTEGER as $$
	    DECLARE
	    BEGIN
	        RETURN query    SELECT COUNT(*)
	                        FROM crowdsourcing.recives_task
	                        WHERE worker=$1;
	    END;
	$$ LANGUAGE plpgsql;
